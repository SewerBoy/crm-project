package com.bjpowernode.crm.workbench.mapper;

import com.bjpowernode.crm.workbench.domain.Activity;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Fri May 06 15:56:56 CST 2022
     */
    int deleteByPrimaryKey(String id);



    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Fri May 06 15:56:56 CST 2022
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Fri May 06 15:56:56 CST 2022
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Fri May 06 15:56:56 CST 2022
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Fri May 06 15:56:56 CST 2022
     */
    int updateByPrimaryKey(Activity record);

    /**
     * 保存市场活动
     *
     *
     * @mbggenerated Fri May 06 15:56:56 CST 2022
     */
    int insertActivity(Activity activity);

    /**
     * 根据条件分页查询市场活动的列表
     * @param map
     * @return
     */
    List<Activity> selectActivityByConditionForPage(Map<String, Object> map);

    /**
     * 根据条件查询市场活动的总条数
     * @param map
     * @return
     */
    int selectCountByConditionForPage(Map<String,Object> map);

    /**
     * 根据id删除市场活动
     * @param ids
     * @return
     */
    int deleteActivityByIds(String[] ids);

    /**
     * 根据id查询市场活动
     * @param id
     * @return
     */
    Activity selectActivityById(String id);

    /**
     * 更新市场活动
     * @param activity
     * @return
     */
    int updateActivity(Activity activity);

    /**
     * 查询所有市场活动
     * @return
     */
    List<Activity> selectAllActivitys();

    /**
     * 根据勾选查询市场活动
     * @return
     */
    List<Activity> selectActivitysById(String[] ids);

    /**
     * 批量插入
     * @param activities
     * @return
     */
    int insertActivityByList(List<Activity> activities);

    /**
     * 根基市场活动id查询市场活动的详细信息
     * @param id
     * @return
     */
    Activity selectActivityForDetailById(String id);

    /**
     * 根据线索id查询市场活动
     * @param id
     * @return
     */
    List<Activity> selectActivityForDetailByClueId(String id);

    /**
     * 根據名称和id查询符合排除条件的市场活动
     * @param map
     * @return
     */
    List<Activity> selectActivityForDetailByNameClueId(Map map);

    /**
     * 根据ids批量查询
     * @param ids
     * @return
     */
    List<Activity> selectActivityBatchByIds(String[] ids);

    /**
     * 根据市场活动名称和线索id模糊查询市场活动(在转换哪里使用)
     * @param map
     * @return
     */
    List<Activity> selectActivityForActivityNameClueId(Map map);

    /**
     * 根據名字模糊查询市场活动
     * @param name
     * @return
     */
    List<Activity> selectActivityByVagueName(String name);

}